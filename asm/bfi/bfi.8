load_file:
	mov bl, [80h]
	add bx, 81h
	mov byte ptr [bx], 0
	mov ah, 3Dh
	mov dx, 82h
	int 21h
	mov bx, ax
	mov si, offset lastbyte+30003

read_byte:
	mov ah, 3Fh
	mov cx, 1
	xor dx, dx
	int 21h
	or al, al
	jz eofile
	mov di, offset language
	mov al, [0]
	mov cx, 9
	repne scasb
	jcxz read_byte
	mov [si], al
	inc si
	jmp read_byte
eofile:
	;setalc
	db 0d6h
	mov byte ptr [si], al

	mov di, offset lastbyte+3
	mov si, offset lastbyte+30002

startcode:
	inc si
	mov al, [si]

	cmp al, 0
	je exit
	cmp al, ">"
	jne nIncPtr
	inc di
	jnc startcode
	dec di
nIncPtr:cmp al, "<"
	jne nDecPtr
	dec di
	jnc startcode
	dec di
nDecPtr:cmp al, "+"
	jne nIncByte
	inc byte ptr[di]
	jnc startcode
	dec byte ptr[di]
nIncByte:cmp al, "-"
	jne nDecByte
	dec byte ptr[di]
	jnc startcode
	inc byte ptr[di]
nDecByte:cmp al, ","
	je GetInput
	cmp al, "."
	je PutOutput

	xor cx, cx
	cmp al, "["
	je StartLoop
	cmp al, "]"
	je EndLoop

exit:	mov ah, 4ch
	int 21h

GetInput: mov ah, 01h
	int 21h
        mov [di], al
	jmp startcode

PutOutput: mov ah, 02h
	mov dl, byte ptr[di]
	int 21h
	jmp startcode

StartLoop:
	mov al, [di]
	or al, al
	jnz xStartLoop
FindLoopEnd:
	inc si
	cmp byte ptr [si], al
	jne CheckClosed
	inc cx
CheckClosed: cmp byte ptr[si], "]"
	jne FindLoopEnd
	jcxz xStartLoop
	dec cx
	jmp FindLoopEnd
xStartLoop:
	jmp startcode

EndLoop:
	dec si
	cmp byte ptr[si], al
	jne CheckOpen
	inc cx
CheckOpen: cmp byte ptr [si], "["
	jne EndLoop
	jcxz xEndLoop
	dec cx
	jmp EndLoop
xEndLoop:
	dec si
	jmp startcode


;fhandle dw offset lastbyte
;buff	db offset lastbyte+2
;dataptr dw offset lastbyte+3
;codeip  dw offset lastbyte+30003
language db "><+-.,[]"
LastByte:
